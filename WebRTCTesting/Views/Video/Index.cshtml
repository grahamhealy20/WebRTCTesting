@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
@*<div class="text-center embed-responsive">
    <video id="video" class="embed-responsive-item" autoplay="autoplay"></video>
</div>
<div class="row">
    <div id="send" class="col-md-4 col-md-push-2">
        <textarea id="textarea"></textarea>
        <button id="button">Send</button>
    </div>
    <div id="recieve" class="col-md-4 col-md-push-2">

    </div>
</div>*@

<video id="localVideo" autoplay muted></video>
<video id="remoteVideo" autoplay muted></video>

<div>
    <button id="startButton">Start</button>
    <button id="callButton">Call</button>
    <button id="hangupButton">Hang Up</button>
</div>

@*<script src="~/signalr/hubs"></script>*@
<script src="https://code.jquery.com/jquery-2.1.4.js"></script>


<script>

    var localStream, localPeerConnection, remotePeerConnection;

    var localVideo = document.getElementById("localVideo");
    var remoteVideo = document.getElementById("remoteVideo");

    var startButton = document.getElementById("startButton");
    var callButton = document.getElementById("callButton");
    var hangupButton = document.getElementById("hangupButton");
    startButton.disabled = false;
    callButton.disabled = true;
    hangupButton.disabled = true;
    startButton.onclick = start;
    callButton.onclick = call;
    hangupButton.onclick = hangup;

    function trace(text) {
        console.log((performance.now() / 1000).toFixed(3) + ": " + text);
    }

    function gotStream(stream) {
        trace("Received local stream");
        localVideo.src = URL.createObjectURL(stream);
        localStream = stream;
        callButton.disabled = false;
    }

    function start() {
        trace("Requesting local stream");
        startButton.disabled = true;
        navigator.webkitGetUserMedia({ audio: true, video: true }, gotStream,
          function (error) {
              trace("getUserMedia error: ", error);
          });
    }

    function call() {
        callButton.disabled = true;
        hangupButton.disabled = false;
        trace("Starting call");

        if (localStream.getVideoTracks().length > 0) {
            trace('Using video device: ' + localStream.getVideoTracks()[0].label);
        }
        if (localStream.getAudioTracks().length > 0) {
            trace('Using audio device: ' + localStream.getAudioTracks()[0].label);
        }

        var servers = null;

        localPeerConnection = new webkitRTCPeerConnection(servers);
        trace("Created local peer connection object localPeerConnection");
        localPeerConnection.onicecandidate = gotLocalIceCandidate;

        remotePeerConnection = new webkitRTCPeerConnection(servers);
        trace("Created remote peer connection object remotePeerConnection");
        remotePeerConnection.onicecandidate = gotRemoteIceCandidate;
        remotePeerConnection.onaddstream = gotRemoteStream;

        localPeerConnection.addStream(localStream);
        trace("Added localStream to localPeerConnection");
        localPeerConnection.createOffer(gotLocalDescription, handleError);
    }

    function gotLocalDescription(description) {
        localPeerConnection.setLocalDescription(description);
        trace("Offer from localPeerConnection: \n" + description.sdp);
        remotePeerConnection.setRemoteDescription(description);
        remotePeerConnection.createAnswer(gotRemoteDescription, handleError);
    }

    function gotRemoteDescription(description) {
        remotePeerConnection.setLocalDescription(description);
        trace("Answer from remotePeerConnection: \n" + description.sdp);
        localPeerConnection.setRemoteDescription(description);
    }

    function hangup() {
        trace("Ending call");
        localPeerConnection.close();
        remotePeerConnection.close();
        localPeerConnection = null;
        remotePeerConnection = null;
        hangupButton.disabled = true;
        callButton.disabled = false;
    }

    function gotRemoteStream(event) {
        remoteVideo.src = URL.createObjectURL(event.stream);
        trace("Received remote stream");
    }

    function gotLocalIceCandidate(event) {
        if (event.candidate) {
            remotePeerConnection.addIceCandidate(new RTCIceCandidate(event.candidate));
            trace("Local ICE candidate: \n" + event.candidate.candidate);
        }
    }

    function gotRemoteIceCandidate(event) {
        if (event.candidate) {
            localPeerConnection.addIceCandidate(new RTCIceCandidate(event.candidate));
            trace("Remote ICE candidate: \n " + event.candidate.candidate);
        }
    }

    function handleError() { }

</script>

@*<script>



    // User Media Constraints
    var contstraints = {
        video: true
    };

    // Success callback func
    function successCallback(stream) {
        // get video element
        var video = document.querySelector("video");

        // Append video url to stream
        video.src = window.URL.createObjectURL(stream);
        //video.src = window.url.createObjectURL(stream);
    }

    // Error callback
    function errorCallback(error) {
        alert("Navigator.getUserMedia error: " + error);
    }

    navigator.webkitGetUserMedia(contstraints, successCallback, errorCallback);

    //// Create a new RTCPeerConnection
    //pc = new webkitRTCPeerConnection(null);
    //pc.onaddstream = gotRemoteStream;
    //pc.addStream(localStream);
    //pc.createOffer(gotOffer);

    //function gotOffer(desc) {
    //    pc.setLocalDescription(desc);
    //    sendOffer(desc);
    //}

    //function gotAnswer(desc) {
    //    pc.setRemoteDescription(desc);
    //}

    //function gotRemoteStream(e) {
    //    attachMediaStream(removeVideo, e.stream);
    //}

    var servers = null;
    var receiveChannel;
    var sendChannel;

    var pc = new webkitRTCPeerConnection(servers, {
        optional: [
            {
                RtpDataChannels: true
            }]
    });

    pc.ondatachannel = function (event) {
        receiveChannel = event.channel;
        receiveChannel.onmessage = function (event) {
            document.querySelector("recieve").innerHTML = event.data;
        }
    }

    sendChannel = pc.createDataChannel("sendDataChannel",
        {
            reliable: false
        });

    $('#button').click(function () {
        console.log("Clicked!");
        var data = document.querySelector("textarea").value;
        console.log("Data " +  data);
        sendChannel.send(data);
    });

    //("button").onclick = function () {
    //    console.log("Clicked!");
    //    var data = document.querySelector("textarea").value;
    //    console.log("Data " +  data);
    //    sendChannel.send(data);
    //}

</script>*@